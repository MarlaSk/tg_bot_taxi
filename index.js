require('dotenv').config();
const { Bot, Keyboard } = require('grammy');
const Database = require('better-sqlite3');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
const dbData = JSON.parse(fs.readFileSync('taxi.json', 'utf8'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new Database('taxi_fixed_prices.db');

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
db.exec(`
  CREATE TABLE IF NOT EXISTS districts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL,
    keywords TEXT NOT NULL
  );

  CREATE TABLE IF NOT EXISTS fixed_prices (
    from_district TEXT NOT NULL,
    to_district TEXT NOT NULL,
    price INTEGER NOT NULL,
    PRIMARY KEY (from_district, to_district)
  );
`);

// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
function initDatabase() {
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
  db.exec(`DELETE FROM fixed_prices; DELETE FROM districts;`);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω—ã
  const insertDistrict = db.prepare(`INSERT INTO districts (name, keywords) VALUES (?, ?)`);
  db.transaction(() => {
    dbData.districts.forEach(district => {
      insertDistrict.run(district.name, district.keywords);
    });
  })();

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
  const insertPrice = db.prepare(`INSERT INTO fixed_prices (from_district, to_district, price) VALUES (?, ?, ?)`);
  db.transaction(() => {
    dbData.prices.forEach(price => {
      insertPrice.run(price.from, price.to, price.price);
    });
  })();
}

initDatabase();

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);
const userSessions = new Map();

const mainKeyboard = new Keyboard()
.text("üöñ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å").row() // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
.text("‚ÑπÔ∏è –î–æ–ø—ã").text("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞").text("üåç –ú–µ–∂–≥–æ—Ä–æ–¥") // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
  .resized()
  .persistent(); // –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫

// –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–ø–Ω–∞–¥–±–∞–≤–∫–∞—Ö
const EXTRAS_INFO = `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–¥–±–∞–≤–∫–∏ –∫ —Ç–∞—Ä–∏—Ñ—É:

‚è± <b>–û–∂–∏–¥–∞–Ω–∏–µ</b>:
- 5 –º–∏–Ω—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–Ω–æ—á—å—é 3)
- –î–∞–ª–µ–µ 10‚ÇΩ/–º–∏–Ω—É—Ç–∞

üöô <b>–í –≥–∞—Ä–∞–∂–∏/–±–µ–∑–¥–æ—Ä–æ–∂—å–µ</b>:
- +20‚ÇΩ –∫ —Ç–∞—Ä–∏—Ñ—É

üë• <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã</b>:
- 3-–π –ø–∞—Å—Å–∞–∂–∏—Ä: +20‚ÇΩ
- 4-–π –ø–∞—Å—Å–∞–∂–∏—Ä: +50‚ÇΩ
- 5+ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: –¥–≤–æ–π–Ω–æ–π —Ç–∞—Ä–∏—Ñ

üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞</b>: +20‚ÇΩ
‚Ü™Ô∏è <b>–ó–∞–µ–∑–¥</b>: +40‚ÇΩ
‚ö†Ô∏è <b>–ù–µ—É–¥–æ–±–Ω—ã–π –∑–∞–µ–∑–¥</b>: +60‚ÇΩ

üß≥ <b>–ë–∞–≥–∞–∂</b>: +30‚ÇΩ
üêï <b>–ñ–∏–≤–æ—Ç–Ω—ã–µ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∫–∏</b>: +50‚ÇΩ
üó£Ô∏è <b>–ö—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π –±–∞–≥–∞–∂</b>: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ

‚è≥ <b>–ü–æ—á–∞—Å–æ–≤–∞—è –∞—Ä–µ–Ω–¥–∞</b>: 1000‚ÇΩ
üîã <b>–ü—Ä–∏–∫—É—Ä–∏—Ç—å</b>: –æ—Ç 250‚ÇΩ
üåÄ <b>–ü–æ–¥–∫–∞—á–∫–∞ –∫–æ–ª–µ—Å</b>: –æ—Ç 200‚ÇΩ`; // –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–ø–∞—Ö

const DELIVERY_INFO = `üì¶ <b>–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>:

üèôÔ∏è <b>–ì–æ—Ä–æ–¥, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω, –ü–∏—Ç–µ—Ä</b>:
- 300‚ÇΩ + —Å—É–º–º–∞ —á–µ–∫–∞

9Ô∏è‚É£ <b>–î–µ–≤—è—Ç—ã–π —Ä–∞–π–æ–Ω</b>:
- 350‚ÇΩ + —Å—É–º–º–∞ —á–µ–∫–∞

üö™ <b>–î–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>:
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +50‚ÇΩ

üåô <b>–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (23:00-06:00)</b>:
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +100‚ÇΩ

üå≥ <b>–î—Ä—É–≥–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> (—Å–∞–¥—ã, –Ω–æ–≤—ã–π –ø—É—Ç—å, –¥–æ–¥–æ–Ω–æ–≤–æ):
- –¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è + —Å—É–º–º–∞ —á–µ–∫–∞`;

const INTERCITY_INFO = `üåç <b>–ú–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã</b>:

<b>–ë–ª–∏–∂–∞–π—à–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>
–ü–æ–¥–≥–æ—Ä–Ω—ã–π = 700‚ÇΩ
‚û°Ô∏è –ü–æ–¥–≥–æ—Ä–Ω—ã–π (—Å–Ω—Ç "–†–∞—Å—Å–≤–µ—Ç") = 800‚ÇΩ
‚û°Ô∏è –°–æ—Å–Ω–æ–≤–æ–±–æ—Ä—Å–∫ = 700‚ÇΩ
‚û°Ô∏è –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–ª—é—á = 800‚ÇΩ
‚û°Ô∏è –¢–µ—Ä–µ–Ω—Ç—å–µ–≤–æ ~ 900‚ÇΩ
‚û°Ô∏è –ë–∞—Ä—Ö–∞—Ç–æ–≤–æ –û–∑–µ—Ä–æ #–ï—Å–∞—É–ª–æ–≤–æ ~1000‚ÇΩ
‚û°Ô∏è –ï—Ä–º–æ–ª–∞–µ–≤–æ, –î—Ä—É–∂–±–∞ ~1100‚ÇΩ
‚û°Ô∏è –ë–∞—Ä—Ö–∞—Ç–ü–∞—Ä–∫ =1000‚ÇΩ
‚û°Ô∏è –ö–∏–Ω–¥—è–∫–æ–≤–æ =1100‚ÇΩ
‚û°Ô∏è –ü–æ—Å–µ–ª–æ–∫ –ë–∞—Ä—Ö–∞—Ç–æ–≤–æ, –ë–µ—Ä—ë–∑–æ–≤–∫–∞ =1200‚ÇΩ

üåç <b>–û–±—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> 35‚ÇΩ/–∫–º

üá∫üáø <b>–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫:</b> üá∫üáø
‚û°Ô∏è –ì–ª–∏–Ω–∫–∏ #–ö—Ä–∞—Å—Ç–µ—Ü = 1400‚ÇΩ
‚û°Ô∏è –õ–µ–Ω–∏–Ω—Å–∫–∏–π =1400‚ÇΩ
‚û°Ô∏è –ß–µ—Ä–µ–º—É—à–∫–∏ =1400‚ÇΩ
‚û°Ô∏è –ö–∏—Ä–æ–≤—Å–∫–∏–π =1500‚ÇΩ
‚û°Ô∏è –°–æ–ª–Ω–µ—á–Ω—ã–π = 1500‚ÇΩ
‚û°Ô∏è –ó–µ–ª—ë–Ω–∞—è–†–æ—â–∞ (–º–µ—Ç-–≥–æ–≤, –í–æ—Ä–æ–Ω–æ–≤–∞...) = 1500‚ÇΩ
‚û°Ô∏è –í–∑–ª—ë—Ç–∫–∞ #–ö—Ä–∞–µ–≤–∞—è #–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª #–ü–õ–ê–ù–ï–¢–ê #–°–æ–≤–µ—Ç—Å–∫–∏–π = 1600‚ÇΩ
‚û°Ô∏è –°–µ–≤–µ—Ä–Ω—ã–π = 1600‚ÇΩ
‚û°Ô∏è –ü–æ–∫—Ä–æ–≤–∫–∞ = 1700‚ÇΩ
‚û°Ô∏è –ü—Ä–µ–¥–º–æ—Å—Ç–Ω–∞—è #–ú–∞—Ç—Ä–æ—Å–æ–≤–∞ = 1700‚ÇΩ
‚û°Ô∏è –°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∏–π(–∑–∞ –ø—Ä–µ–¥–º–æ—Å—Ç–Ω–æ–π –¥–æ –º–æ—Å—Ç–∞) = 1800‚ÇΩ
‚û°Ô∏è –ñ–î–≤–æ–∫–∑–∞–ªüöÇ =1800‚ÇΩ
‚û°Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π =1700‚ÇΩ
‚û°Ô∏è –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π = 1800‚ÇΩ
‚û°Ô∏è –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π (–°–≤–æ–±–æ–¥–Ω—ã–π, –ö–æ–ø—ã–ª–æ–≤–∞, #–ê–∫–∞–¥–µ–º, –°–æ–ª–æ–Ω—Ü—ã) = 2000‚ÇΩ
‚û°Ô∏è –°–µ–≤–µ—Ä–æ–ó–∞–ø–∞–¥–Ω—ã–π (–ë–°–ú–ü, –≤–∏–ª—å—Å–∫–æ–≥–æ, –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è) = 2000‚ÇΩ
‚û°Ô∏è –£–¥–∞—á–Ω—ã–π = 2000‚ÇΩ
‚û°Ô∏è –ë–æ–±—Ä–æ–≤—ã–π–õ–æ–≥ = 2000‚ÇΩ
‚û°Ô∏è –†–æ–µ–≤ –†—É—á–µ–π = 2200‚ÇΩ
‚û°Ô∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç‚úàÔ∏è = 2500‚ÇΩ
‚û°Ô∏è –ü–æ—Å–µ–ª–æ–∫ –ë–µ—Ä–µ—Ç—å = 3900‚ÇΩ`;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
bot.command('start', async (ctx) => {
  await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: mainKeyboard,
    parse_mode: "HTML"
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–ø—ã"
bot.hears("‚ÑπÔ∏è –î–æ–ø—ã", async (ctx) => {
  await ctx.reply(EXTRAS_INFO, {
    parse_mode: "HTML",
    reply_markup: mainKeyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç–∞–≤–∫–∞"
bot.hears("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", async (ctx) => {
  await ctx.reply(DELIVERY_INFO, {
    parse_mode: "HTML",
    reply_markup: mainKeyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–∂–≥–æ—Ä–æ–¥"
bot.hears("üåç –ú–µ–∂–≥–æ—Ä–æ–¥", async (ctx) => {
  await ctx.reply(INTERCITY_INFO, {
    parse_mode: "HTML",
    reply_markup: mainKeyboard
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
bot.hears("üöñ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", async (ctx) => {
  userSessions.set(ctx.from.id, { step: 'waiting_from' });
  await ctx.reply(`üöñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–õ–µ–Ω–∏–Ω–∞ 15" –∏–ª–∏ "–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω"):\n
(–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞ –≤ –∫–æ–Ω—Ü–µ —É–ª–∏—Ü)`, {
    reply_markup: { remove_keyboard: true } // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞
  });
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
function normalizeAddress(address) {
  return address
    .replace(/\d+\s*[–∞-—èa-z]?(\s*\/\s*\d+[–∞-—èa-z]?)?/gi, '')
    .replace(/[,\.]/g, '')
    .trim()
    .toLowerCase();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É
function findDistrict(address) {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
  const exactMatch = db.prepare(`
    SELECT name FROM districts 
    WHERE keywords LIKE '%' || ? || '%'
    LIMIT 1
  `).get(address.toLowerCase());

  if (exactMatch) return exactMatch;

  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞)
  const normalized = normalizeAddress(address);
  return db.prepare(`
    SELECT name FROM districts 
    WHERE keywords LIKE '%' || ? || '%'
    LIMIT 1
  `).get(normalized);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
function getFixedPrice(fromDistrict, toDistrict) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  const directPrice = db.prepare(`
    SELECT price FROM fixed_prices 
    WHERE from_district = ? AND to_district = ?
  `).get(fromDistrict, toDistrict);

  if (directPrice) return directPrice.price;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  const reversePrice = db.prepare(`
    SELECT price FROM fixed_prices 
    WHERE from_district = ? AND to_district = ?
  `).get(toDistrict, fromDistrict);

  return reversePrice?.price || null;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
bot.command('start', async (ctx) => {
  userSessions.set(ctx.from.id, { step: 'waiting_from' });
  await ctx.reply('üöñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–õ–µ–Ω–∏–Ω–∞ 15" –∏–ª–∏ "–ú–∏–∫—Ä–æ—Ä–∞–π–æ–Ω"):');
});

bot.on('message:text', async (ctx) => {
  const userId = ctx.from.id;
  const session = userSessions.get(userId);
  const text = ctx.message.text.trim();

  if (!session) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');

  try {
    if (session.step === 'waiting_from') {
      const district = findDistrict(text);
      if (!district) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å:');
      }

      userSessions.set(userId, {
        step: 'waiting_to',
        fromDistrict: district.name,
        originalFrom: text
      });

      await ctx.reply(`üìç –†–∞–π–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${district.name}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å:`);
    
    } else if (session.step === 'waiting_to') {
      const district = findDistrict(text);
      if (!district) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å:');
      }

      const price = getFixedPrice(session.fromDistrict, district.name);
      if (!price) {
        return ctx.reply('–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞—Ä–∏—Ñ');
      }

      await ctx.reply(
        `‚úÖ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n` +
        `üìç –û—Ç–∫—É–¥–∞: ${session.originalFrom} (${session.fromDistrict})\n` +
        `üèÅ –ö—É–¥–∞: ${text} (${district.name})\n\n` +
        `üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} —Ä—É–±.\n\n` +
        `–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"`,
        {
          reply_markup: {
            keyboard: mainKeyboard.build(),
            resize_keyboard: true
          }
        }
      );

      userSessions.delete(userId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start');
    userSessions.delete(userId);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');